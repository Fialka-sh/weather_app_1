{"version":3,"sources":["Components.js/Homepage.js","Components.js/AddToFavor.js","Components.js/Favorites.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","cityName","curTemp","curWeatherTxt","weeklyTemp","favList","searchCityData","updatetoFavList","useState","cityEntered","setCityEntered","className","onChange","event","target","value","type","placeholder","onClick","name","filter","favIt","City","length","alert","map","dayTemp","i","key","day","temp","AddToFavor","city","index","id","deleteItem","showFavData","to","Favorites","deleteFavItem","favorite","CurTemp","ID","App","APIcode","setCityName","cityKey","setCityKey","setCurTemp","setCurWeatherTxt","setWeeklyTemp","Txt","Week","setFavList","getWeatherData","a","fetch","json","cityDATA","Key","locationCityKey","then","response","responseTempData","LocalizedName","Temperature","Metric","Value","WeatherText","responseWeekTempData","tempWeek","DailyForecasts","MaxTemp","Maximum","MinTemp","Minimum","convertToC","Math","floor","push","useEffect","console","log","exact","path","txt","week","favItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b6c6a17.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction HomePage({\n  cityName, \n  curTemp, \n  curWeatherTxt, \n  weeklyTemp, \n  favList, \n  searchCityData, \n  updatetoFavList\n}) {\n  \n  const [cityEntered, setCityEntered] = useState('');\n\n  const enterCity = event => setCityEntered(event.target.value);\n\n  const searchCity = name => {\n    if (name !== '') {\n      searchCityData(name);\n    }\n  };\n\n  const addToFav = () => {\n    let cityInFav = favList.filter((favIt) => favIt.City === cityName);\n    if (cityInFav.length === 0) {\n      updatetoFavList(cityName, curTemp, curWeatherTxt, weeklyTemp);\n    } else {\n      alert(\"City is already in Favorits List\");\n    }\n  };\n\n  return (\n    <div className=\"homePage cneterIt\">\n      <div className=\"searchCityArea centerIt\">\n        <input \n          onChange={enterCity}\n          type=\"text\"\n          className=\"inpt\"\n          placeholder=\"Enter City Name\"\n        ></input>\n        \n        <button\n          onClick={() => {searchCity(cityEntered)}}\n          className=\"btn\"\n        >\n          Search\n        </button>\n      </div>\n\n      <div className=\"weatherRsltsArea\">\n          <div className=\"crntRsltArea centerIt\">\n            <div className=\"crntRslt\">\n              <h3>{cityName}</h3>\n              <h3>{curTemp}</h3>\n            </div>\n            \n            <button\n              onClick={addToFav}\n              className=\"btn\"\n            >\n              Add To Favorites\n            </button>\n          </div>\n\n          <div className=\"crntRsltTxtArea centerIt\">\n            <p className=\"crntResuTxt\">{curWeatherTxt}</p>\n          </div>\n\n          <div className=\"weekWeatherArea centerIt\">\n            <div className=\"weatherTitle centerIt\">\n              <h3>Weekly weather Forecast</h3>\n            </div>    \n            <div className=\"dailyWeatherArea centerIt\">\n              {weeklyTemp.map((dayTemp, i) => {\n                return (\n                  <div className=\"dailyTemp centerIt\" key={i}>\n                    <p>{dayTemp.day}</p>\n                    <p>{dayTemp.temp}</p>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n      </div> \n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nfunction AddToFavor({\n    city,\n    temp,\n    index, \n    id, \n    deleteItem, \n    showFavData\n}) {\n    \n    return (\n       \n            <div className=\"favListIt\">\n                <div className=\"favItemDel\">\n                    <button onClick={()=>{deleteItem(index)}} className=\"favDelBtn\">X</button>\n                </div>\n                \n                <Link to='/' onClick={()=> {showFavData(city)}} className='link'>\n                    <div className=\"favListData centerIt\">\n                        <p className=\"cityKeyId\">{id}</p>\n                        <p>{city}</p> \n                        <p>{temp} c</p>\n                    </div>\n                </Link>\n            </div>\n    )\n}\n\nexport default AddToFavor\n","import React from 'react'\nimport AddToFavor from './AddToFavor'\n\nfunction Favorites({\n  favList,\n  deleteFavItem,\n  showFavData\n}) {\n\n    return (\n      <div className=\"favorites centerIt\">\n        <div className=\"favList\">\n          {favList.map((favorite, i) => {\n              return (\n                <AddToFavor\n                    city={favorite.City}\n                    temp={favorite.CurTemp}\n                    id={favorite.ID}\n                    key={i}\n                    index={i}\n                    deleteItem={deleteFavItem}\n                    showFavData={showFavData}\n                />\n              )\n            })}    \n        </div> \n      </div>\n    );\n}\n\nexport default Favorites\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport HomePage from \"./Components.js/Homepage\";\nimport Favorites from \"./Components.js/Favorites\";\n\nfunction App() {\n\tconst APIcode = \"IghvBaSB0LoKgRG8EpKUOhGm0nXkFrcH\";\n\n\t/*  ------------------------------------------------ */\n\tconst [cityName, setCityName] = useState(\"\");\n\tconst [cityKey, setCityKey] = useState(\"\");\n\tconst [curTemp, setCurTemp] = useState(0);\n\tconst [curWeatherTxt, setCurWeatherTxt] = useState(\"\");\n\tconst [weeklyTemp, setWeeklyTemp] = useState([]);\n\tconst [favList, setFavList] = useState([\n\t\t{\n\t\t\tCity: \"Elat\",\n\t\t\tID: 21548,\n\t\t\tCurTemp: 21,\n\t\t\tTxt: \"A bit Chilli\",\n\t\t\tWeek: [\n\t\t\t\t{ day: \"Sun\", temp: 22 },\n\t\t\t\t{ day: \"Mon\", temp: 23 },\n\t\t\t\t{ day: \"Tue\", temp: 19 },\n\t\t\t\t{ day: \"Wed\", temp: 25 },\n\t\t\t\t{ day: \"Thu\", temp: 21 },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tCity: \"Haifa\",\n\t\t\tCurTemp: 25,\n\t\t\tTxt: \"Wonderfull Day\",\n\t\t\tID: 21324,\n\t\t\tWeek: [\n\t\t\t\t{ day: \"Sun\", temp: 25 },\n\t\t\t\t{ day: \"Mon\", temp: 27 },\n\t\t\t\t{ day: \"Tue\", temp: 26 },\n\t\t\t\t{ day: \"Wed\", temp: 25 },\n\t\t\t\t{ day: \"Thu\", temp: 25 },\n\t\t\t],\n\t\t},\n\t]);\n\t/*  ---------------------------------------------- */\n\n\t/*\n\t * ---> FETCHING WEATHER DATA  <--- *\n\t */\n\tconst getWeatherData = async (city) => {\n\t\tsetCurWeatherTxt(\"FETCHING...\");\n\t\ttry {\n\t\t\tconst cityDATA = await (\n\t\t\t\tawait fetch(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${APIcode}&q=${city}`)\n\t\t\t).json();\n\n\t\t\tsetCityKey(cityDATA[0].Key);\n\t\t\tlet locationCityKey = cityDATA[0].Key;\n\n\t\t\tfetch(`https://dataservice.accuweather.com/currentconditions/v1/${locationCityKey}?apikey=${APIcode}`)\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((responseTempData) => {\n\t\t\t\t\tsetCityName(cityDATA[0].LocalizedName);\n\t\t\t\t\tsetCurTemp(responseTempData[0].Temperature.Metric.Value);\n\t\t\t\t\tsetCurWeatherTxt(responseTempData[0].WeatherText);\n\n\t\t\t\t\tfetch(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationCityKey}?apikey=${APIcode}`)\n\t\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t\t.then((responseWeekTempData) => {\n\t\t\t\t\t\t\tlet tempWeek = [];\n\t\t\t\t\t\t\tfor (let i = 0; i < responseWeekTempData.DailyForecasts.length; i++) {\n\t\t\t\t\t\t\t\tconst weekDays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\"];\n\t\t\t\t\t\t\t\tlet MaxTemp = responseWeekTempData.DailyForecasts[i].Temperature.Maximum.Value;\n\t\t\t\t\t\t\t\tlet MinTemp = responseWeekTempData.DailyForecasts[i].Temperature.Minimum.Value;\n\t\t\t\t\t\t\t\tlet convertToC = Math.floor(((MaxTemp + MinTemp) / 2 - 32) / 1.8);\n\t\t\t\t\t\t\t\ttempWeek.push({ day: weekDays[i], temp: convertToC });\n\t\t\t\t\t\t\t\tsetWeeklyTemp([...tempWeek]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\tsetCurWeatherTxt(\"ERROR...TRY AGAIN\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tconsole.log(\"hi\");\n\t\tgetWeatherData(\"tel-aviv\");\n\t}, []);\n\n\tconst searchCityData = async (name) => {\n\t\tgetWeatherData(name);\n\t};\n\n\t/*\n\t * ---> UPDATING FAVORITS LISTS<--- *\n\t */\n\tconst updateFavList = (name, temp, txt, week) => {\n\t\tsetFavList([...favList, { City: name, ID: cityKey, CurTemp: temp, Txt: txt, Week: [...week] }]);\n\t};\n\n\tconst deleteFavItem = (i) => {\n\t\tlet temp = favList.filter((favItem, index) => index !== i);\n\t\tsetFavList([...temp]);\n\t};\n\n\tconst showFavData = (name) => {\n\t\tlet temp = favList.filter((favItem, index) => favItem.City === name);\n\t\tsetCityName(temp[0].City);\n\t\tsetCityKey(temp[0].ID);\n\t\tsetCurTemp(temp[0].CurTemp);\n\t\tsetCurWeatherTxt(temp[0].Txt);\n\t\tsetWeeklyTemp([...temp[0].Week]);\n\n\t\t/* ANOTHER Option Is To do A NEW Fetching to call\n\t\t * for current weather data of the city\n\t\t * through getWeatherData(name)\n\t\t */\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1 className='title centerIt'>Weather App</h1>\n\t\t\t<Router>\n\t\t\t\t<header className='nav centerIt'>\n\t\t\t\t\t<Link to='/' className='navTi'>\n\t\t\t\t\t\tHome\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link to='/favorites' className='navTi'>\n\t\t\t\t\t\tFavorites\n\t\t\t\t\t</Link>\n\t\t\t\t</header>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t\t<HomePage\n\t\t\t\t\t\t\tcityName={cityName}\n\t\t\t\t\t\t\tcurTemp={curTemp}\n\t\t\t\t\t\t\tfavList={favList}\n\t\t\t\t\t\t\tcurWeatherTxt={curWeatherTxt}\n\t\t\t\t\t\t\tweeklyTemp={weeklyTemp}\n\t\t\t\t\t\t\tsearchCityData={searchCityData}\n\t\t\t\t\t\t\tupdatetoFavList={updateFavList}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path='/favorites'>\n\t\t\t\t\t\t<Favorites favList={favList} deleteFavItem={deleteFavItem} showFavData={showFavData} />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}